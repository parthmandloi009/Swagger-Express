openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
  contact:
    email: "sysoas@gmail.com"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: Model API
    description: All Model Related Functions


#Get Request with Single Response 
paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: Successul Resaponse
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string

#Get Request with path(dynamic URL) & required
  /users/{userId}:
  get:
    summary: Returns a user by ID.
    parameters:
      - name: userId
        in: path
        required: true
        description: Parameter description in CommonMark or HTML.
        schema:
          type : integer
          format: int64
          minimum: 1
    responses: 
      '200':
        description: OK


#Get Request with Multiple Responses & Response description

  /users/{userId}:
    get:
      summary: Returns a user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 4
                  name:
                    type: string
                    example: Jessica Smith
        '400':
          description: The specified user ID is invalid (not a number).
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error

#Post json/body & Body required

  /users:
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses: 
        '201':
          description: Created

#Post json/body & Specific variables required required

  /users:
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
              # Both properties are required
              required:  
                - id
                - name
      responses: 
        '201':
          description: Created

#Defining Schema Somewhere Else

  /users:
    post:
      summary: Creates a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created

components:
  schemas:
    User:
      properties:
        id:
          type: integer
        name:
          type: string
      # Both properties are required
      required:  
        - id
        - name

#Security
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: []


#Image Response 
paths:
  /employees:
    get:
      summary: Returns a list of employees.
      responses:
        '200':      # Response
          description: OK
          content:  # Response body
            image/*:     # Media type


#Content Types
# application/json
# application/xml
# application/x-www-form-urlencoded
# multipart/form-data
# text/plain; charset=utf-8
# text/html
# application/pdf
# image/png

#Get Query
paths:
  /users:
    get:
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, poweruser, admin]
          required: true


#File Upload/Multipart Form/Data
paths:
  /api/model:
    post:
      tags:
        - Model API
      summary: Upload Video/Image for Inferring
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload.
        - in: formData
          name: app
          type: string
          required: true
          enum: [pose,demography,lpr,peopleSegNet,faceDetectIR,peopleNet,trafficCamNet,faceDetect,facialLandmarks,heartRate]
          description: Name of the model.
        - in: formData
          name: id
          type: string
          required: true
          description: Some random Id.
      responses:
        200:
          description: Successful Response
        400:
          description: User Error
        500:
          description: Internal Server Error



#In Headers
  /ping:
    get:
      summary: Checks if the server is alive
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true

#Cokies
  /ping:
    get:
      summary: Checks if the server is alive
      parameters:
        - in: cookie
          name: debug
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - in: cookie
          name: csrftoken
          schema:
            type: string